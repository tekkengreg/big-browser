#!/bin/bash

# Workflow complet pour BigBrowser - De la construction √† l'installation

set -e

echo "=============================================="
echo "üöÄ WORKFLOW COMPLET BIGBROWSER FLATPAK"
echo "=============================================="
echo ""

# √âtape 1: V√©rifications pr√©liminaires
echo "üìã √âTAPE 1: V√©rifications pr√©liminaires"
echo "=============================================="

if [ ! -f "bigbrowser" ]; then
    echo "‚ùå Erreur: L'ex√©cutable 'bigbrowser' n'existe pas."
    echo "   Cr√©ez d'abord l'ex√©cutable avec: deno compile -A main.ts"
    exit 1
fi

if [ ! -f "flatpak_apps.json" ]; then
    echo "‚ùå Erreur: flatpak_apps.json n'existe pas."
    exit 1
fi

echo "‚úÖ Ex√©cutable BigBrowser trouv√© ($(du -h bigbrowser | cut -f1))"
echo "‚úÖ Configuration des applications trouv√©e"

# Compter les applications avec ic√¥nes
apps_with_icons=$(python3 -c "
import json
import os
with open('flatpak_apps.json') as f:
    apps = json.load(f)
count = sum(1 for app in apps if os.path.exists(f'icons/{app}.png'))
total = len(apps)
print(f'{count}/{total}')
")

echo "‚úÖ Applications avec ic√¥nes: $apps_with_icons"
echo ""

# √âtape 2: Construction
echo "üì¶ √âTAPE 2: Construction des applications"
echo "=============================================="
./build-all-apps.sh
echo ""

# √âtape 3: Installation depuis le repository local
echo "üíæ √âTAPE 3: Installation depuis le repository local"
echo "=============================================="
./install-from-local-repo.sh
echo ""

# √âtape 4: V√©rification
echo "‚úÖ √âTAPE 4: V√©rification des installations"
echo "=============================================="

installed_apps=$(flatpak list --app | grep bigbrowser | wc -l)
echo "üìä Applications BigBrowser install√©es: $installed_apps"

if [ $installed_apps -gt 0 ]; then
    echo ""
    echo "üìã Applications disponibles:"
    flatpak list --app | grep bigbrowser | awk '{print "  - " $2 " (" $1 ")"}'
fi

echo ""

# √âtape 5: Export (optionnel)
echo "üì§ √âTAPE 5: Export des fichiers .flatpak (optionnel)"
echo "=============================================="
read -p "Voulez-vous exporter les applications vers des fichiers .flatpak ? (y/N): " export_choice

if [[ "$export_choice" =~ ^[Yy]$ ]]; then
    ./export-all-apps.sh
    echo ""
    echo "üìÅ Fichiers .flatpak cr√©√©s dans le dossier 'dist/':"
    ls -lh dist/*.flatpak 2>/dev/null | awk '{print "  - " $9 " (" $5 ")"}'
else
    echo "‚è≠Ô∏è  Export ignor√©"
fi

echo ""
echo "=============================================="
echo "üéâ WORKFLOW COMPLET TERMIN√â !"
echo "=============================================="
echo ""
echo "üìä R√âSUM√â FINAL:"
echo "  Repository local:     local-repo/"
echo "  Applications install√©es: $installed_apps"
echo "  Remote configur√©:     local-bigbrowser"
echo ""
echo "üéØ UTILISATION:"
echo "  flatpak run com.tekkengreg.bigbrowser.google"
echo "  flatpak run com.tekkengreg.bigbrowser.youtube"
echo "  flatpak run com.tekkengreg.bigbrowser.github"
echo ""
echo "üîß GESTION:"
echo "  flatpak list --app | grep bigbrowser    # Lister les apps"
echo "  flatpak update                          # Mettre √† jour"
echo "  flatpak uninstall com.tekkengreg.bigbrowser.APPNAME  # D√©sinstaller"
echo ""
echo "üìÇ REPOSITORY LOCAL:"
echo "  Emplacement: $(pwd)/local-repo"
echo "  Remote name: local-bigbrowser"
echo "  Type: file://$(pwd)/local-repo" 